/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef THBaseService_H
#define THBaseService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "hbase_types.h"

namespace apache { namespace hadoop { namespace hbase { namespace thrift2 {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class THBaseServiceIf {
 public:
  virtual ~THBaseServiceIf() {}

  /**
   * Test for the existence of columns in the table, as specified in the TGet.
   * 
   * @return true if the specified TGet matches one or more keys, false if not
   * 
   * @param table the table to check on
   * 
   * @param tget the TGet to check for
   */
  virtual bool exists(const std::string& table, const TGet& tget) = 0;

  /**
   * Method for getting data from a row.
   * 
   * If the row cannot be found an empty Result is returned.
   * This can be checked by the empty field of the TResult
   * 
   * @return the result
   * 
   * @param table the table to get from
   * 
   * @param tget the TGet to fetch
   */
  virtual void get(TResult& _return, const std::string& table, const TGet& tget) = 0;

  /**
   * Method for getting multiple rows.
   * 
   * If a row cannot be found there will be a null
   * value in the result list for that TGet at the
   * same position.
   * 
   * So the Results are in the same order as the TGets.
   * 
   * @param table the table to get from
   * 
   * @param tgets a list of TGets to fetch, the Result list
   * will have the Results at corresponding positions
   * or null if there was an error
   */
  virtual void getMultiple(std::vector<TResult> & _return, const std::string& table, const std::vector<TGet> & tgets) = 0;

  /**
   * Commit a TPut to a table.
   * 
   * @param table the table to put data in
   * 
   * @param tput the TPut to put
   */
  virtual void put(const std::string& table, const TPut& tput) = 0;

  /**
   * Atomically checks if a row/family/qualifier value matches the expected
   * value. If it does, it adds the TPut.
   * 
   * @return true if the new put was executed, false otherwise
   * 
   * @param table to check in and put to
   * 
   * @param row row to check
   * 
   * @param family column family to check
   * 
   * @param qualifier column qualifier to check
   * 
   * @param value the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   * 
   * @param tput the TPut to put if the check succeeds
   */
  virtual bool checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& tput) = 0;

  /**
   * Commit a List of Puts to the table.
   * 
   * @param table the table to put data in
   * 
   * @param tputs a list of TPuts to commit
   */
  virtual void putMultiple(const std::string& table, const std::vector<TPut> & tputs) = 0;

  /**
   * Deletes as specified by the TDelete.
   * 
   * Note: "delete" is a reserved keyword and cannot be used in Thrift
   * thus the inconsistent naming scheme from the other functions.
   * 
   * @param table the table to delete from
   * 
   * @param tdelete the TDelete to delete
   */
  virtual void deleteSingle(const std::string& table, const TDelete& tdelete) = 0;

  /**
   * Bulk commit a List of TDeletes to the table.
   * 
   * Throws a TIOError if any of the deletes fail.
   * 
   * Always returns an empty list for backwards compatibility.
   * 
   * @param table the table to delete from
   * 
   * @param tdeletes list of TDeletes to delete
   */
  virtual void deleteMultiple(std::vector<TDelete> & _return, const std::string& table, const std::vector<TDelete> & tdeletes) = 0;

  /**
   * Atomically checks if a row/family/qualifier value matches the expected
   * value. If it does, it adds the delete.
   * 
   * @return true if the new delete was executed, false otherwise
   * 
   * @param table to check in and delete from
   * 
   * @param row row to check
   * 
   * @param family column family to check
   * 
   * @param qualifier column qualifier to check
   * 
   * @param value the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   * 
   * @param tdelete the TDelete to execute if the check succeeds
   */
  virtual bool checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& tdelete) = 0;
  virtual void increment(TResult& _return, const std::string& table, const TIncrement& tincrement) = 0;
  virtual void append(TResult& _return, const std::string& table, const TAppend& tappend) = 0;

  /**
   * Get a Scanner for the provided TScan object.
   * 
   * @return Scanner Id to be used with other scanner procedures
   * 
   * @param table the table to get the Scanner for
   * 
   * @param tscan the scan object to get a Scanner for
   */
  virtual int32_t openScanner(const std::string& table, const TScan& tscan) = 0;

  /**
   * Grabs multiple rows from a Scanner.
   * 
   * @return Between zero and numRows TResults
   * 
   * @param scannerId the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
   * 
   * @param numRows number of rows to return
   */
  virtual void getScannerRows(std::vector<TResult> & _return, const int32_t scannerId, const int32_t numRows) = 0;

  /**
   * Closes the scanner. Should be called to free server side resources timely.
   * Typically close once the scanner is not needed anymore, i.e. after looping
   * over it to get all the required rows.
   * 
   * @param scannerId the Id of the Scanner to close *
   */
  virtual void closeScanner(const int32_t scannerId) = 0;

  /**
   * mutateRow performs multiple mutations atomically on a single row.
   * 
   * @param table table to apply the mutations
   * 
   * @param trowMutations mutations to apply
   */
  virtual void mutateRow(const std::string& table, const TRowMutations& trowMutations) = 0;

  /**
   * Get results for the provided TScan object.
   * This helper function opens a scanner, get the results and close the scanner.
   * 
   * @return between zero and numRows TResults
   * 
   * @param table the table to get the Scanner for
   * 
   * @param tscan the scan object to get a Scanner for
   * 
   * @param numRows number of rows to return
   */
  virtual void getScannerResults(std::vector<TResult> & _return, const std::string& table, const TScan& tscan, const int32_t numRows) = 0;
};

class THBaseServiceIfFactory {
 public:
  typedef THBaseServiceIf Handler;

  virtual ~THBaseServiceIfFactory() {}

  virtual THBaseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(THBaseServiceIf* /* handler */) = 0;
  };

class THBaseServiceIfSingletonFactory : virtual public THBaseServiceIfFactory {
 public:
  THBaseServiceIfSingletonFactory(const ::std::shared_ptr<THBaseServiceIf>& iface) : iface_(iface) {}
  virtual ~THBaseServiceIfSingletonFactory() {}

  virtual THBaseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(THBaseServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<THBaseServiceIf> iface_;
};

class THBaseServiceNull : virtual public THBaseServiceIf {
 public:
  virtual ~THBaseServiceNull() {}
  bool exists(const std::string& /* table */, const TGet& /* tget */) override {
    bool _return = false;
    return _return;
  }
  void get(TResult& /* _return */, const std::string& /* table */, const TGet& /* tget */) override {
    return;
  }
  void getMultiple(std::vector<TResult> & /* _return */, const std::string& /* table */, const std::vector<TGet> & /* tgets */) override {
    return;
  }
  void put(const std::string& /* table */, const TPut& /* tput */) override {
    return;
  }
  bool checkAndPut(const std::string& /* table */, const std::string& /* row */, const std::string& /* family */, const std::string& /* qualifier */, const std::string& /* value */, const TPut& /* tput */) override {
    bool _return = false;
    return _return;
  }
  void putMultiple(const std::string& /* table */, const std::vector<TPut> & /* tputs */) override {
    return;
  }
  void deleteSingle(const std::string& /* table */, const TDelete& /* tdelete */) override {
    return;
  }
  void deleteMultiple(std::vector<TDelete> & /* _return */, const std::string& /* table */, const std::vector<TDelete> & /* tdeletes */) override {
    return;
  }
  bool checkAndDelete(const std::string& /* table */, const std::string& /* row */, const std::string& /* family */, const std::string& /* qualifier */, const std::string& /* value */, const TDelete& /* tdelete */) override {
    bool _return = false;
    return _return;
  }
  void increment(TResult& /* _return */, const std::string& /* table */, const TIncrement& /* tincrement */) override {
    return;
  }
  void append(TResult& /* _return */, const std::string& /* table */, const TAppend& /* tappend */) override {
    return;
  }
  int32_t openScanner(const std::string& /* table */, const TScan& /* tscan */) override {
    int32_t _return = 0;
    return _return;
  }
  void getScannerRows(std::vector<TResult> & /* _return */, const int32_t /* scannerId */, const int32_t /* numRows */) override {
    return;
  }
  void closeScanner(const int32_t /* scannerId */) override {
    return;
  }
  void mutateRow(const std::string& /* table */, const TRowMutations& /* trowMutations */) override {
    return;
  }
  void getScannerResults(std::vector<TResult> & /* _return */, const std::string& /* table */, const TScan& /* tscan */, const int32_t /* numRows */) override {
    return;
  }
};


class THBaseService_exists_args {
 public:

  THBaseService_exists_args(const THBaseService_exists_args&);
  THBaseService_exists_args& operator=(const THBaseService_exists_args&);
  THBaseService_exists_args() noexcept
                            : table() {
  }

  virtual ~THBaseService_exists_args() noexcept;
  /**
   * the table to check on
   */
  std::string table;
  /**
   * the TGet to check for
   */
  TGet tget;

  void __set_table(const std::string& val);

  void __set_tget(const TGet& val);

  bool operator == (const THBaseService_exists_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tget == rhs.tget))
      return false;
    return true;
  }
  bool operator != (const THBaseService_exists_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_exists_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_exists_pargs {
 public:


  virtual ~THBaseService_exists_pargs() noexcept;
  /**
   * the table to check on
   */
  const std::string* table;
  /**
   * the TGet to check for
   */
  const TGet* tget;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_exists_result__isset {
  _THBaseService_exists_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_exists_result__isset;

class THBaseService_exists_result {
 public:

  THBaseService_exists_result(const THBaseService_exists_result&);
  THBaseService_exists_result& operator=(const THBaseService_exists_result&);
  THBaseService_exists_result() noexcept
                              : success(0) {
  }

  virtual ~THBaseService_exists_result() noexcept;
  bool success;
  TIOError io;

  _THBaseService_exists_result__isset __isset;

  void __set_success(const bool val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_exists_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_exists_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_exists_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_exists_presult__isset {
  _THBaseService_exists_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_exists_presult__isset;

class THBaseService_exists_presult {
 public:


  virtual ~THBaseService_exists_presult() noexcept;
  bool* success;
  TIOError io;

  _THBaseService_exists_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_get_args {
 public:

  THBaseService_get_args(const THBaseService_get_args&);
  THBaseService_get_args& operator=(const THBaseService_get_args&);
  THBaseService_get_args() noexcept
                         : table() {
  }

  virtual ~THBaseService_get_args() noexcept;
  /**
   * the table to get from
   */
  std::string table;
  /**
   * the TGet to fetch
   */
  TGet tget;

  void __set_table(const std::string& val);

  void __set_tget(const TGet& val);

  bool operator == (const THBaseService_get_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tget == rhs.tget))
      return false;
    return true;
  }
  bool operator != (const THBaseService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_get_pargs {
 public:


  virtual ~THBaseService_get_pargs() noexcept;
  /**
   * the table to get from
   */
  const std::string* table;
  /**
   * the TGet to fetch
   */
  const TGet* tget;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_get_result__isset {
  _THBaseService_get_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_get_result__isset;

class THBaseService_get_result {
 public:

  THBaseService_get_result(const THBaseService_get_result&);
  THBaseService_get_result& operator=(const THBaseService_get_result&);
  THBaseService_get_result() noexcept {
  }

  virtual ~THBaseService_get_result() noexcept;
  TResult success;
  TIOError io;

  _THBaseService_get_result__isset __isset;

  void __set_success(const TResult& val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_get_presult__isset {
  _THBaseService_get_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_get_presult__isset;

class THBaseService_get_presult {
 public:


  virtual ~THBaseService_get_presult() noexcept;
  TResult* success;
  TIOError io;

  _THBaseService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_getMultiple_args {
 public:

  THBaseService_getMultiple_args(const THBaseService_getMultiple_args&);
  THBaseService_getMultiple_args& operator=(const THBaseService_getMultiple_args&);
  THBaseService_getMultiple_args() noexcept
                                 : table() {
  }

  virtual ~THBaseService_getMultiple_args() noexcept;
  /**
   * the table to get from
   */
  std::string table;
  /**
   * a list of TGets to fetch, the Result list
   * will have the Results at corresponding positions
   * or null if there was an error
   */
  std::vector<TGet>  tgets;

  void __set_table(const std::string& val);

  void __set_tgets(const std::vector<TGet> & val);

  bool operator == (const THBaseService_getMultiple_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tgets == rhs.tgets))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getMultiple_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getMultiple_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_getMultiple_pargs {
 public:


  virtual ~THBaseService_getMultiple_pargs() noexcept;
  /**
   * the table to get from
   */
  const std::string* table;
  /**
   * a list of TGets to fetch, the Result list
   * will have the Results at corresponding positions
   * or null if there was an error
   */
  const std::vector<TGet> * tgets;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_getMultiple_result__isset {
  _THBaseService_getMultiple_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getMultiple_result__isset;

class THBaseService_getMultiple_result {
 public:

  THBaseService_getMultiple_result(const THBaseService_getMultiple_result&);
  THBaseService_getMultiple_result& operator=(const THBaseService_getMultiple_result&);
  THBaseService_getMultiple_result() noexcept {
  }

  virtual ~THBaseService_getMultiple_result() noexcept;
  std::vector<TResult>  success;
  TIOError io;

  _THBaseService_getMultiple_result__isset __isset;

  void __set_success(const std::vector<TResult> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_getMultiple_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getMultiple_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getMultiple_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_getMultiple_presult__isset {
  _THBaseService_getMultiple_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getMultiple_presult__isset;

class THBaseService_getMultiple_presult {
 public:


  virtual ~THBaseService_getMultiple_presult() noexcept;
  std::vector<TResult> * success;
  TIOError io;

  _THBaseService_getMultiple_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_put_args {
 public:

  THBaseService_put_args(const THBaseService_put_args&);
  THBaseService_put_args& operator=(const THBaseService_put_args&);
  THBaseService_put_args() noexcept
                         : table() {
  }

  virtual ~THBaseService_put_args() noexcept;
  /**
   * the table to put data in
   */
  std::string table;
  /**
   * the TPut to put
   */
  TPut tput;

  void __set_table(const std::string& val);

  void __set_tput(const TPut& val);

  bool operator == (const THBaseService_put_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tput == rhs.tput))
      return false;
    return true;
  }
  bool operator != (const THBaseService_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_put_pargs {
 public:


  virtual ~THBaseService_put_pargs() noexcept;
  /**
   * the table to put data in
   */
  const std::string* table;
  /**
   * the TPut to put
   */
  const TPut* tput;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_put_result__isset {
  _THBaseService_put_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_put_result__isset;

class THBaseService_put_result {
 public:

  THBaseService_put_result(const THBaseService_put_result&);
  THBaseService_put_result& operator=(const THBaseService_put_result&);
  THBaseService_put_result() noexcept {
  }

  virtual ~THBaseService_put_result() noexcept;
  TIOError io;

  _THBaseService_put_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_put_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_put_presult__isset {
  _THBaseService_put_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_put_presult__isset;

class THBaseService_put_presult {
 public:


  virtual ~THBaseService_put_presult() noexcept;
  TIOError io;

  _THBaseService_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _THBaseService_checkAndPut_args__isset {
  _THBaseService_checkAndPut_args__isset() : value(false) {}
  bool value :1;
} _THBaseService_checkAndPut_args__isset;

class THBaseService_checkAndPut_args {
 public:

  THBaseService_checkAndPut_args(const THBaseService_checkAndPut_args&);
  THBaseService_checkAndPut_args& operator=(const THBaseService_checkAndPut_args&);
  THBaseService_checkAndPut_args() noexcept
                                 : table(),
                                   row(),
                                   family(),
                                   qualifier(),
                                   value() {
  }

  virtual ~THBaseService_checkAndPut_args() noexcept;
  /**
   * to check in and put to
   */
  std::string table;
  /**
   * row to check
   */
  std::string row;
  /**
   * column family to check
   */
  std::string family;
  /**
   * column qualifier to check
   */
  std::string qualifier;
  /**
   * the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   */
  std::string value;
  /**
   * the TPut to put if the check succeeds
   */
  TPut tput;

  _THBaseService_checkAndPut_args__isset __isset;

  void __set_table(const std::string& val);

  void __set_row(const std::string& val);

  void __set_family(const std::string& val);

  void __set_qualifier(const std::string& val);

  void __set_value(const std::string& val);

  void __set_tput(const TPut& val);

  bool operator == (const THBaseService_checkAndPut_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(row == rhs.row))
      return false;
    if (!(family == rhs.family))
      return false;
    if (!(qualifier == rhs.qualifier))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(tput == rhs.tput))
      return false;
    return true;
  }
  bool operator != (const THBaseService_checkAndPut_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_checkAndPut_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_checkAndPut_pargs {
 public:


  virtual ~THBaseService_checkAndPut_pargs() noexcept;
  /**
   * to check in and put to
   */
  const std::string* table;
  /**
   * row to check
   */
  const std::string* row;
  /**
   * column family to check
   */
  const std::string* family;
  /**
   * column qualifier to check
   */
  const std::string* qualifier;
  /**
   * the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   */
  const std::string* value;
  /**
   * the TPut to put if the check succeeds
   */
  const TPut* tput;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_checkAndPut_result__isset {
  _THBaseService_checkAndPut_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_checkAndPut_result__isset;

class THBaseService_checkAndPut_result {
 public:

  THBaseService_checkAndPut_result(const THBaseService_checkAndPut_result&);
  THBaseService_checkAndPut_result& operator=(const THBaseService_checkAndPut_result&);
  THBaseService_checkAndPut_result() noexcept
                                   : success(0) {
  }

  virtual ~THBaseService_checkAndPut_result() noexcept;
  bool success;
  TIOError io;

  _THBaseService_checkAndPut_result__isset __isset;

  void __set_success(const bool val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_checkAndPut_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_checkAndPut_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_checkAndPut_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_checkAndPut_presult__isset {
  _THBaseService_checkAndPut_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_checkAndPut_presult__isset;

class THBaseService_checkAndPut_presult {
 public:


  virtual ~THBaseService_checkAndPut_presult() noexcept;
  bool* success;
  TIOError io;

  _THBaseService_checkAndPut_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_putMultiple_args {
 public:

  THBaseService_putMultiple_args(const THBaseService_putMultiple_args&);
  THBaseService_putMultiple_args& operator=(const THBaseService_putMultiple_args&);
  THBaseService_putMultiple_args() noexcept
                                 : table() {
  }

  virtual ~THBaseService_putMultiple_args() noexcept;
  /**
   * the table to put data in
   */
  std::string table;
  /**
   * a list of TPuts to commit
   */
  std::vector<TPut>  tputs;

  void __set_table(const std::string& val);

  void __set_tputs(const std::vector<TPut> & val);

  bool operator == (const THBaseService_putMultiple_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tputs == rhs.tputs))
      return false;
    return true;
  }
  bool operator != (const THBaseService_putMultiple_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_putMultiple_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_putMultiple_pargs {
 public:


  virtual ~THBaseService_putMultiple_pargs() noexcept;
  /**
   * the table to put data in
   */
  const std::string* table;
  /**
   * a list of TPuts to commit
   */
  const std::vector<TPut> * tputs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_putMultiple_result__isset {
  _THBaseService_putMultiple_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_putMultiple_result__isset;

class THBaseService_putMultiple_result {
 public:

  THBaseService_putMultiple_result(const THBaseService_putMultiple_result&);
  THBaseService_putMultiple_result& operator=(const THBaseService_putMultiple_result&);
  THBaseService_putMultiple_result() noexcept {
  }

  virtual ~THBaseService_putMultiple_result() noexcept;
  TIOError io;

  _THBaseService_putMultiple_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_putMultiple_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_putMultiple_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_putMultiple_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_putMultiple_presult__isset {
  _THBaseService_putMultiple_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_putMultiple_presult__isset;

class THBaseService_putMultiple_presult {
 public:


  virtual ~THBaseService_putMultiple_presult() noexcept;
  TIOError io;

  _THBaseService_putMultiple_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_deleteSingle_args {
 public:

  THBaseService_deleteSingle_args(const THBaseService_deleteSingle_args&);
  THBaseService_deleteSingle_args& operator=(const THBaseService_deleteSingle_args&);
  THBaseService_deleteSingle_args() noexcept
                                  : table() {
  }

  virtual ~THBaseService_deleteSingle_args() noexcept;
  /**
   * the table to delete from
   */
  std::string table;
  /**
   * the TDelete to delete
   */
  TDelete tdelete;

  void __set_table(const std::string& val);

  void __set_tdelete(const TDelete& val);

  bool operator == (const THBaseService_deleteSingle_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tdelete == rhs.tdelete))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteSingle_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteSingle_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_deleteSingle_pargs {
 public:


  virtual ~THBaseService_deleteSingle_pargs() noexcept;
  /**
   * the table to delete from
   */
  const std::string* table;
  /**
   * the TDelete to delete
   */
  const TDelete* tdelete;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_deleteSingle_result__isset {
  _THBaseService_deleteSingle_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_deleteSingle_result__isset;

class THBaseService_deleteSingle_result {
 public:

  THBaseService_deleteSingle_result(const THBaseService_deleteSingle_result&);
  THBaseService_deleteSingle_result& operator=(const THBaseService_deleteSingle_result&);
  THBaseService_deleteSingle_result() noexcept {
  }

  virtual ~THBaseService_deleteSingle_result() noexcept;
  TIOError io;

  _THBaseService_deleteSingle_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_deleteSingle_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteSingle_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteSingle_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_deleteSingle_presult__isset {
  _THBaseService_deleteSingle_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_deleteSingle_presult__isset;

class THBaseService_deleteSingle_presult {
 public:


  virtual ~THBaseService_deleteSingle_presult() noexcept;
  TIOError io;

  _THBaseService_deleteSingle_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_deleteMultiple_args {
 public:

  THBaseService_deleteMultiple_args(const THBaseService_deleteMultiple_args&);
  THBaseService_deleteMultiple_args& operator=(const THBaseService_deleteMultiple_args&);
  THBaseService_deleteMultiple_args() noexcept
                                    : table() {
  }

  virtual ~THBaseService_deleteMultiple_args() noexcept;
  /**
   * the table to delete from
   */
  std::string table;
  /**
   * list of TDeletes to delete
   */
  std::vector<TDelete>  tdeletes;

  void __set_table(const std::string& val);

  void __set_tdeletes(const std::vector<TDelete> & val);

  bool operator == (const THBaseService_deleteMultiple_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tdeletes == rhs.tdeletes))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteMultiple_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteMultiple_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_deleteMultiple_pargs {
 public:


  virtual ~THBaseService_deleteMultiple_pargs() noexcept;
  /**
   * the table to delete from
   */
  const std::string* table;
  /**
   * list of TDeletes to delete
   */
  const std::vector<TDelete> * tdeletes;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_deleteMultiple_result__isset {
  _THBaseService_deleteMultiple_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_deleteMultiple_result__isset;

class THBaseService_deleteMultiple_result {
 public:

  THBaseService_deleteMultiple_result(const THBaseService_deleteMultiple_result&);
  THBaseService_deleteMultiple_result& operator=(const THBaseService_deleteMultiple_result&);
  THBaseService_deleteMultiple_result() noexcept {
  }

  virtual ~THBaseService_deleteMultiple_result() noexcept;
  std::vector<TDelete>  success;
  TIOError io;

  _THBaseService_deleteMultiple_result__isset __isset;

  void __set_success(const std::vector<TDelete> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_deleteMultiple_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_deleteMultiple_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_deleteMultiple_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_deleteMultiple_presult__isset {
  _THBaseService_deleteMultiple_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_deleteMultiple_presult__isset;

class THBaseService_deleteMultiple_presult {
 public:


  virtual ~THBaseService_deleteMultiple_presult() noexcept;
  std::vector<TDelete> * success;
  TIOError io;

  _THBaseService_deleteMultiple_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _THBaseService_checkAndDelete_args__isset {
  _THBaseService_checkAndDelete_args__isset() : value(false) {}
  bool value :1;
} _THBaseService_checkAndDelete_args__isset;

class THBaseService_checkAndDelete_args {
 public:

  THBaseService_checkAndDelete_args(const THBaseService_checkAndDelete_args&);
  THBaseService_checkAndDelete_args& operator=(const THBaseService_checkAndDelete_args&);
  THBaseService_checkAndDelete_args() noexcept
                                    : table(),
                                      row(),
                                      family(),
                                      qualifier(),
                                      value() {
  }

  virtual ~THBaseService_checkAndDelete_args() noexcept;
  /**
   * to check in and delete from
   */
  std::string table;
  /**
   * row to check
   */
  std::string row;
  /**
   * column family to check
   */
  std::string family;
  /**
   * column qualifier to check
   */
  std::string qualifier;
  /**
   * the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   */
  std::string value;
  /**
   * the TDelete to execute if the check succeeds
   */
  TDelete tdelete;

  _THBaseService_checkAndDelete_args__isset __isset;

  void __set_table(const std::string& val);

  void __set_row(const std::string& val);

  void __set_family(const std::string& val);

  void __set_qualifier(const std::string& val);

  void __set_value(const std::string& val);

  void __set_tdelete(const TDelete& val);

  bool operator == (const THBaseService_checkAndDelete_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(row == rhs.row))
      return false;
    if (!(family == rhs.family))
      return false;
    if (!(qualifier == rhs.qualifier))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(tdelete == rhs.tdelete))
      return false;
    return true;
  }
  bool operator != (const THBaseService_checkAndDelete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_checkAndDelete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_checkAndDelete_pargs {
 public:


  virtual ~THBaseService_checkAndDelete_pargs() noexcept;
  /**
   * to check in and delete from
   */
  const std::string* table;
  /**
   * row to check
   */
  const std::string* row;
  /**
   * column family to check
   */
  const std::string* family;
  /**
   * column qualifier to check
   */
  const std::string* qualifier;
  /**
   * the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   */
  const std::string* value;
  /**
   * the TDelete to execute if the check succeeds
   */
  const TDelete* tdelete;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_checkAndDelete_result__isset {
  _THBaseService_checkAndDelete_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_checkAndDelete_result__isset;

class THBaseService_checkAndDelete_result {
 public:

  THBaseService_checkAndDelete_result(const THBaseService_checkAndDelete_result&);
  THBaseService_checkAndDelete_result& operator=(const THBaseService_checkAndDelete_result&);
  THBaseService_checkAndDelete_result() noexcept
                                      : success(0) {
  }

  virtual ~THBaseService_checkAndDelete_result() noexcept;
  bool success;
  TIOError io;

  _THBaseService_checkAndDelete_result__isset __isset;

  void __set_success(const bool val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_checkAndDelete_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_checkAndDelete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_checkAndDelete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_checkAndDelete_presult__isset {
  _THBaseService_checkAndDelete_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_checkAndDelete_presult__isset;

class THBaseService_checkAndDelete_presult {
 public:


  virtual ~THBaseService_checkAndDelete_presult() noexcept;
  bool* success;
  TIOError io;

  _THBaseService_checkAndDelete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_increment_args {
 public:

  THBaseService_increment_args(const THBaseService_increment_args&);
  THBaseService_increment_args& operator=(const THBaseService_increment_args&);
  THBaseService_increment_args() noexcept
                               : table() {
  }

  virtual ~THBaseService_increment_args() noexcept;
  /**
   * the table to increment the value on
   */
  std::string table;
  /**
   * the TIncrement to increment
   */
  TIncrement tincrement;

  void __set_table(const std::string& val);

  void __set_tincrement(const TIncrement& val);

  bool operator == (const THBaseService_increment_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tincrement == rhs.tincrement))
      return false;
    return true;
  }
  bool operator != (const THBaseService_increment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_increment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_increment_pargs {
 public:


  virtual ~THBaseService_increment_pargs() noexcept;
  /**
   * the table to increment the value on
   */
  const std::string* table;
  /**
   * the TIncrement to increment
   */
  const TIncrement* tincrement;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_increment_result__isset {
  _THBaseService_increment_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_increment_result__isset;

class THBaseService_increment_result {
 public:

  THBaseService_increment_result(const THBaseService_increment_result&);
  THBaseService_increment_result& operator=(const THBaseService_increment_result&);
  THBaseService_increment_result() noexcept {
  }

  virtual ~THBaseService_increment_result() noexcept;
  TResult success;
  TIOError io;

  _THBaseService_increment_result__isset __isset;

  void __set_success(const TResult& val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_increment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_increment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_increment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_increment_presult__isset {
  _THBaseService_increment_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_increment_presult__isset;

class THBaseService_increment_presult {
 public:


  virtual ~THBaseService_increment_presult() noexcept;
  TResult* success;
  TIOError io;

  _THBaseService_increment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_append_args {
 public:

  THBaseService_append_args(const THBaseService_append_args&);
  THBaseService_append_args& operator=(const THBaseService_append_args&);
  THBaseService_append_args() noexcept
                            : table() {
  }

  virtual ~THBaseService_append_args() noexcept;
  /**
   * the table to append the value on
   */
  std::string table;
  /**
   * the TAppend to append
   */
  TAppend tappend;

  void __set_table(const std::string& val);

  void __set_tappend(const TAppend& val);

  bool operator == (const THBaseService_append_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tappend == rhs.tappend))
      return false;
    return true;
  }
  bool operator != (const THBaseService_append_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_append_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_append_pargs {
 public:


  virtual ~THBaseService_append_pargs() noexcept;
  /**
   * the table to append the value on
   */
  const std::string* table;
  /**
   * the TAppend to append
   */
  const TAppend* tappend;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_append_result__isset {
  _THBaseService_append_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_append_result__isset;

class THBaseService_append_result {
 public:

  THBaseService_append_result(const THBaseService_append_result&);
  THBaseService_append_result& operator=(const THBaseService_append_result&);
  THBaseService_append_result() noexcept {
  }

  virtual ~THBaseService_append_result() noexcept;
  TResult success;
  TIOError io;

  _THBaseService_append_result__isset __isset;

  void __set_success(const TResult& val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_append_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_append_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_append_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_append_presult__isset {
  _THBaseService_append_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_append_presult__isset;

class THBaseService_append_presult {
 public:


  virtual ~THBaseService_append_presult() noexcept;
  TResult* success;
  TIOError io;

  _THBaseService_append_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_openScanner_args {
 public:

  THBaseService_openScanner_args(const THBaseService_openScanner_args&);
  THBaseService_openScanner_args& operator=(const THBaseService_openScanner_args&);
  THBaseService_openScanner_args() noexcept
                                 : table() {
  }

  virtual ~THBaseService_openScanner_args() noexcept;
  /**
   * the table to get the Scanner for
   */
  std::string table;
  /**
   * the scan object to get a Scanner for
   */
  TScan tscan;

  void __set_table(const std::string& val);

  void __set_tscan(const TScan& val);

  bool operator == (const THBaseService_openScanner_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tscan == rhs.tscan))
      return false;
    return true;
  }
  bool operator != (const THBaseService_openScanner_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_openScanner_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_openScanner_pargs {
 public:


  virtual ~THBaseService_openScanner_pargs() noexcept;
  /**
   * the table to get the Scanner for
   */
  const std::string* table;
  /**
   * the scan object to get a Scanner for
   */
  const TScan* tscan;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_openScanner_result__isset {
  _THBaseService_openScanner_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_openScanner_result__isset;

class THBaseService_openScanner_result {
 public:

  THBaseService_openScanner_result(const THBaseService_openScanner_result&);
  THBaseService_openScanner_result& operator=(const THBaseService_openScanner_result&);
  THBaseService_openScanner_result() noexcept
                                   : success(0) {
  }

  virtual ~THBaseService_openScanner_result() noexcept;
  int32_t success;
  TIOError io;

  _THBaseService_openScanner_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_openScanner_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_openScanner_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_openScanner_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_openScanner_presult__isset {
  _THBaseService_openScanner_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_openScanner_presult__isset;

class THBaseService_openScanner_presult {
 public:


  virtual ~THBaseService_openScanner_presult() noexcept;
  int32_t* success;
  TIOError io;

  _THBaseService_openScanner_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _THBaseService_getScannerRows_args__isset {
  _THBaseService_getScannerRows_args__isset() : numRows(true) {}
  bool numRows :1;
} _THBaseService_getScannerRows_args__isset;

class THBaseService_getScannerRows_args {
 public:

  THBaseService_getScannerRows_args(const THBaseService_getScannerRows_args&) noexcept;
  THBaseService_getScannerRows_args& operator=(const THBaseService_getScannerRows_args&) noexcept;
  THBaseService_getScannerRows_args() noexcept
                                    : scannerId(0),
                                      numRows(1) {
  }

  virtual ~THBaseService_getScannerRows_args() noexcept;
  /**
   * the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
   */
  int32_t scannerId;
  /**
   * number of rows to return
   */
  int32_t numRows;

  _THBaseService_getScannerRows_args__isset __isset;

  void __set_scannerId(const int32_t val);

  void __set_numRows(const int32_t val);

  bool operator == (const THBaseService_getScannerRows_args & rhs) const
  {
    if (!(scannerId == rhs.scannerId))
      return false;
    if (!(numRows == rhs.numRows))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getScannerRows_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getScannerRows_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_getScannerRows_pargs {
 public:


  virtual ~THBaseService_getScannerRows_pargs() noexcept;
  /**
   * the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
   */
  const int32_t* scannerId;
  /**
   * number of rows to return
   */
  const int32_t* numRows;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_getScannerRows_result__isset {
  _THBaseService_getScannerRows_result__isset() : success(false), io(false), ia(false) {}
  bool success :1;
  bool io :1;
  bool ia :1;
} _THBaseService_getScannerRows_result__isset;

class THBaseService_getScannerRows_result {
 public:

  THBaseService_getScannerRows_result(const THBaseService_getScannerRows_result&);
  THBaseService_getScannerRows_result& operator=(const THBaseService_getScannerRows_result&);
  THBaseService_getScannerRows_result() noexcept {
  }

  virtual ~THBaseService_getScannerRows_result() noexcept;
  std::vector<TResult>  success;
  TIOError io;
  /**
   * if the scannerId is invalid
   */
  TIllegalArgument ia;

  _THBaseService_getScannerRows_result__isset __isset;

  void __set_success(const std::vector<TResult> & val);

  void __set_io(const TIOError& val);

  void __set_ia(const TIllegalArgument& val);

  bool operator == (const THBaseService_getScannerRows_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    if (!(ia == rhs.ia))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getScannerRows_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getScannerRows_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_getScannerRows_presult__isset {
  _THBaseService_getScannerRows_presult__isset() : success(false), io(false), ia(false) {}
  bool success :1;
  bool io :1;
  bool ia :1;
} _THBaseService_getScannerRows_presult__isset;

class THBaseService_getScannerRows_presult {
 public:


  virtual ~THBaseService_getScannerRows_presult() noexcept;
  std::vector<TResult> * success;
  TIOError io;
  /**
   * if the scannerId is invalid
   */
  TIllegalArgument ia;

  _THBaseService_getScannerRows_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_closeScanner_args {
 public:

  THBaseService_closeScanner_args(const THBaseService_closeScanner_args&) noexcept;
  THBaseService_closeScanner_args& operator=(const THBaseService_closeScanner_args&) noexcept;
  THBaseService_closeScanner_args() noexcept
                                  : scannerId(0) {
  }

  virtual ~THBaseService_closeScanner_args() noexcept;
  /**
   * the Id of the Scanner to close *
   */
  int32_t scannerId;

  void __set_scannerId(const int32_t val);

  bool operator == (const THBaseService_closeScanner_args & rhs) const
  {
    if (!(scannerId == rhs.scannerId))
      return false;
    return true;
  }
  bool operator != (const THBaseService_closeScanner_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_closeScanner_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_closeScanner_pargs {
 public:


  virtual ~THBaseService_closeScanner_pargs() noexcept;
  /**
   * the Id of the Scanner to close *
   */
  const int32_t* scannerId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_closeScanner_result__isset {
  _THBaseService_closeScanner_result__isset() : io(false), ia(false) {}
  bool io :1;
  bool ia :1;
} _THBaseService_closeScanner_result__isset;

class THBaseService_closeScanner_result {
 public:

  THBaseService_closeScanner_result(const THBaseService_closeScanner_result&);
  THBaseService_closeScanner_result& operator=(const THBaseService_closeScanner_result&);
  THBaseService_closeScanner_result() noexcept {
  }

  virtual ~THBaseService_closeScanner_result() noexcept;
  TIOError io;
  /**
   * if the scannerId is invalid
   */
  TIllegalArgument ia;

  _THBaseService_closeScanner_result__isset __isset;

  void __set_io(const TIOError& val);

  void __set_ia(const TIllegalArgument& val);

  bool operator == (const THBaseService_closeScanner_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    if (!(ia == rhs.ia))
      return false;
    return true;
  }
  bool operator != (const THBaseService_closeScanner_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_closeScanner_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_closeScanner_presult__isset {
  _THBaseService_closeScanner_presult__isset() : io(false), ia(false) {}
  bool io :1;
  bool ia :1;
} _THBaseService_closeScanner_presult__isset;

class THBaseService_closeScanner_presult {
 public:


  virtual ~THBaseService_closeScanner_presult() noexcept;
  TIOError io;
  /**
   * if the scannerId is invalid
   */
  TIllegalArgument ia;

  _THBaseService_closeScanner_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THBaseService_mutateRow_args {
 public:

  THBaseService_mutateRow_args(const THBaseService_mutateRow_args&);
  THBaseService_mutateRow_args& operator=(const THBaseService_mutateRow_args&);
  THBaseService_mutateRow_args() noexcept
                               : table() {
  }

  virtual ~THBaseService_mutateRow_args() noexcept;
  /**
   * table to apply the mutations
   */
  std::string table;
  /**
   * mutations to apply
   */
  TRowMutations trowMutations;

  void __set_table(const std::string& val);

  void __set_trowMutations(const TRowMutations& val);

  bool operator == (const THBaseService_mutateRow_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(trowMutations == rhs.trowMutations))
      return false;
    return true;
  }
  bool operator != (const THBaseService_mutateRow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_mutateRow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_mutateRow_pargs {
 public:


  virtual ~THBaseService_mutateRow_pargs() noexcept;
  /**
   * table to apply the mutations
   */
  const std::string* table;
  /**
   * mutations to apply
   */
  const TRowMutations* trowMutations;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_mutateRow_result__isset {
  _THBaseService_mutateRow_result__isset() : io(false) {}
  bool io :1;
} _THBaseService_mutateRow_result__isset;

class THBaseService_mutateRow_result {
 public:

  THBaseService_mutateRow_result(const THBaseService_mutateRow_result&);
  THBaseService_mutateRow_result& operator=(const THBaseService_mutateRow_result&);
  THBaseService_mutateRow_result() noexcept {
  }

  virtual ~THBaseService_mutateRow_result() noexcept;
  TIOError io;

  _THBaseService_mutateRow_result__isset __isset;

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_mutateRow_result & rhs) const
  {
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_mutateRow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_mutateRow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_mutateRow_presult__isset {
  _THBaseService_mutateRow_presult__isset() : io(false) {}
  bool io :1;
} _THBaseService_mutateRow_presult__isset;

class THBaseService_mutateRow_presult {
 public:


  virtual ~THBaseService_mutateRow_presult() noexcept;
  TIOError io;

  _THBaseService_mutateRow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _THBaseService_getScannerResults_args__isset {
  _THBaseService_getScannerResults_args__isset() : numRows(true) {}
  bool numRows :1;
} _THBaseService_getScannerResults_args__isset;

class THBaseService_getScannerResults_args {
 public:

  THBaseService_getScannerResults_args(const THBaseService_getScannerResults_args&);
  THBaseService_getScannerResults_args& operator=(const THBaseService_getScannerResults_args&);
  THBaseService_getScannerResults_args() noexcept
                                       : table(),
                                         numRows(1) {
  }

  virtual ~THBaseService_getScannerResults_args() noexcept;
  /**
   * the table to get the Scanner for
   */
  std::string table;
  /**
   * the scan object to get a Scanner for
   */
  TScan tscan;
  /**
   * number of rows to return
   */
  int32_t numRows;

  _THBaseService_getScannerResults_args__isset __isset;

  void __set_table(const std::string& val);

  void __set_tscan(const TScan& val);

  void __set_numRows(const int32_t val);

  bool operator == (const THBaseService_getScannerResults_args & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(tscan == rhs.tscan))
      return false;
    if (!(numRows == rhs.numRows))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getScannerResults_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getScannerResults_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THBaseService_getScannerResults_pargs {
 public:


  virtual ~THBaseService_getScannerResults_pargs() noexcept;
  /**
   * the table to get the Scanner for
   */
  const std::string* table;
  /**
   * the scan object to get a Scanner for
   */
  const TScan* tscan;
  /**
   * number of rows to return
   */
  const int32_t* numRows;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_getScannerResults_result__isset {
  _THBaseService_getScannerResults_result__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getScannerResults_result__isset;

class THBaseService_getScannerResults_result {
 public:

  THBaseService_getScannerResults_result(const THBaseService_getScannerResults_result&);
  THBaseService_getScannerResults_result& operator=(const THBaseService_getScannerResults_result&);
  THBaseService_getScannerResults_result() noexcept {
  }

  virtual ~THBaseService_getScannerResults_result() noexcept;
  std::vector<TResult>  success;
  TIOError io;

  _THBaseService_getScannerResults_result__isset __isset;

  void __set_success(const std::vector<TResult> & val);

  void __set_io(const TIOError& val);

  bool operator == (const THBaseService_getScannerResults_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(io == rhs.io))
      return false;
    return true;
  }
  bool operator != (const THBaseService_getScannerResults_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THBaseService_getScannerResults_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THBaseService_getScannerResults_presult__isset {
  _THBaseService_getScannerResults_presult__isset() : success(false), io(false) {}
  bool success :1;
  bool io :1;
} _THBaseService_getScannerResults_presult__isset;

class THBaseService_getScannerResults_presult {
 public:


  virtual ~THBaseService_getScannerResults_presult() noexcept;
  std::vector<TResult> * success;
  TIOError io;

  _THBaseService_getScannerResults_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class THBaseServiceClient : virtual public THBaseServiceIf {
 public:
  THBaseServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  THBaseServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  /**
   * Test for the existence of columns in the table, as specified in the TGet.
   * 
   * @return true if the specified TGet matches one or more keys, false if not
   * 
   * @param table the table to check on
   * 
   * @param tget the TGet to check for
   */
  bool exists(const std::string& table, const TGet& tget) override;
  void send_exists(const std::string& table, const TGet& tget);
  bool recv_exists();
  /**
   * Method for getting data from a row.
   * 
   * If the row cannot be found an empty Result is returned.
   * This can be checked by the empty field of the TResult
   * 
   * @return the result
   * 
   * @param table the table to get from
   * 
   * @param tget the TGet to fetch
   */
  void get(TResult& _return, const std::string& table, const TGet& tget) override;
  void send_get(const std::string& table, const TGet& tget);
  void recv_get(TResult& _return);
  /**
   * Method for getting multiple rows.
   * 
   * If a row cannot be found there will be a null
   * value in the result list for that TGet at the
   * same position.
   * 
   * So the Results are in the same order as the TGets.
   * 
   * @param table the table to get from
   * 
   * @param tgets a list of TGets to fetch, the Result list
   * will have the Results at corresponding positions
   * or null if there was an error
   */
  void getMultiple(std::vector<TResult> & _return, const std::string& table, const std::vector<TGet> & tgets) override;
  void send_getMultiple(const std::string& table, const std::vector<TGet> & tgets);
  void recv_getMultiple(std::vector<TResult> & _return);
  /**
   * Commit a TPut to a table.
   * 
   * @param table the table to put data in
   * 
   * @param tput the TPut to put
   */
  void put(const std::string& table, const TPut& tput) override;
  void send_put(const std::string& table, const TPut& tput);
  void recv_put();
  /**
   * Atomically checks if a row/family/qualifier value matches the expected
   * value. If it does, it adds the TPut.
   * 
   * @return true if the new put was executed, false otherwise
   * 
   * @param table to check in and put to
   * 
   * @param row row to check
   * 
   * @param family column family to check
   * 
   * @param qualifier column qualifier to check
   * 
   * @param value the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   * 
   * @param tput the TPut to put if the check succeeds
   */
  bool checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& tput) override;
  void send_checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& tput);
  bool recv_checkAndPut();
  /**
   * Commit a List of Puts to the table.
   * 
   * @param table the table to put data in
   * 
   * @param tputs a list of TPuts to commit
   */
  void putMultiple(const std::string& table, const std::vector<TPut> & tputs) override;
  void send_putMultiple(const std::string& table, const std::vector<TPut> & tputs);
  void recv_putMultiple();
  /**
   * Deletes as specified by the TDelete.
   * 
   * Note: "delete" is a reserved keyword and cannot be used in Thrift
   * thus the inconsistent naming scheme from the other functions.
   * 
   * @param table the table to delete from
   * 
   * @param tdelete the TDelete to delete
   */
  void deleteSingle(const std::string& table, const TDelete& tdelete) override;
  void send_deleteSingle(const std::string& table, const TDelete& tdelete);
  void recv_deleteSingle();
  /**
   * Bulk commit a List of TDeletes to the table.
   * 
   * Throws a TIOError if any of the deletes fail.
   * 
   * Always returns an empty list for backwards compatibility.
   * 
   * @param table the table to delete from
   * 
   * @param tdeletes list of TDeletes to delete
   */
  void deleteMultiple(std::vector<TDelete> & _return, const std::string& table, const std::vector<TDelete> & tdeletes) override;
  void send_deleteMultiple(const std::string& table, const std::vector<TDelete> & tdeletes);
  void recv_deleteMultiple(std::vector<TDelete> & _return);
  /**
   * Atomically checks if a row/family/qualifier value matches the expected
   * value. If it does, it adds the delete.
   * 
   * @return true if the new delete was executed, false otherwise
   * 
   * @param table to check in and delete from
   * 
   * @param row row to check
   * 
   * @param family column family to check
   * 
   * @param qualifier column qualifier to check
   * 
   * @param value the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   * 
   * @param tdelete the TDelete to execute if the check succeeds
   */
  bool checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& tdelete) override;
  void send_checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& tdelete);
  bool recv_checkAndDelete();
  void increment(TResult& _return, const std::string& table, const TIncrement& tincrement) override;
  void send_increment(const std::string& table, const TIncrement& tincrement);
  void recv_increment(TResult& _return);
  void append(TResult& _return, const std::string& table, const TAppend& tappend) override;
  void send_append(const std::string& table, const TAppend& tappend);
  void recv_append(TResult& _return);
  /**
   * Get a Scanner for the provided TScan object.
   * 
   * @return Scanner Id to be used with other scanner procedures
   * 
   * @param table the table to get the Scanner for
   * 
   * @param tscan the scan object to get a Scanner for
   */
  int32_t openScanner(const std::string& table, const TScan& tscan) override;
  void send_openScanner(const std::string& table, const TScan& tscan);
  int32_t recv_openScanner();
  /**
   * Grabs multiple rows from a Scanner.
   * 
   * @return Between zero and numRows TResults
   * 
   * @param scannerId the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
   * 
   * @param numRows number of rows to return
   */
  void getScannerRows(std::vector<TResult> & _return, const int32_t scannerId, const int32_t numRows) override;
  void send_getScannerRows(const int32_t scannerId, const int32_t numRows);
  void recv_getScannerRows(std::vector<TResult> & _return);
  /**
   * Closes the scanner. Should be called to free server side resources timely.
   * Typically close once the scanner is not needed anymore, i.e. after looping
   * over it to get all the required rows.
   * 
   * @param scannerId the Id of the Scanner to close *
   */
  void closeScanner(const int32_t scannerId) override;
  void send_closeScanner(const int32_t scannerId);
  void recv_closeScanner();
  /**
   * mutateRow performs multiple mutations atomically on a single row.
   * 
   * @param table table to apply the mutations
   * 
   * @param trowMutations mutations to apply
   */
  void mutateRow(const std::string& table, const TRowMutations& trowMutations) override;
  void send_mutateRow(const std::string& table, const TRowMutations& trowMutations);
  void recv_mutateRow();
  /**
   * Get results for the provided TScan object.
   * This helper function opens a scanner, get the results and close the scanner.
   * 
   * @return between zero and numRows TResults
   * 
   * @param table the table to get the Scanner for
   * 
   * @param tscan the scan object to get a Scanner for
   * 
   * @param numRows number of rows to return
   */
  void getScannerResults(std::vector<TResult> & _return, const std::string& table, const TScan& tscan, const int32_t numRows) override;
  void send_getScannerResults(const std::string& table, const TScan& tscan, const int32_t numRows);
  void recv_getScannerResults(std::vector<TResult> & _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class THBaseServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<THBaseServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (THBaseServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_exists(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMultiple(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkAndPut(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putMultiple(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteSingle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteMultiple(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkAndDelete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_increment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_append(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_openScanner(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getScannerRows(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeScanner(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mutateRow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getScannerResults(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  THBaseServiceProcessor(::std::shared_ptr<THBaseServiceIf> iface) :
    iface_(iface) {
    processMap_["exists"] = &THBaseServiceProcessor::process_exists;
    processMap_["get"] = &THBaseServiceProcessor::process_get;
    processMap_["getMultiple"] = &THBaseServiceProcessor::process_getMultiple;
    processMap_["put"] = &THBaseServiceProcessor::process_put;
    processMap_["checkAndPut"] = &THBaseServiceProcessor::process_checkAndPut;
    processMap_["putMultiple"] = &THBaseServiceProcessor::process_putMultiple;
    processMap_["deleteSingle"] = &THBaseServiceProcessor::process_deleteSingle;
    processMap_["deleteMultiple"] = &THBaseServiceProcessor::process_deleteMultiple;
    processMap_["checkAndDelete"] = &THBaseServiceProcessor::process_checkAndDelete;
    processMap_["increment"] = &THBaseServiceProcessor::process_increment;
    processMap_["append"] = &THBaseServiceProcessor::process_append;
    processMap_["openScanner"] = &THBaseServiceProcessor::process_openScanner;
    processMap_["getScannerRows"] = &THBaseServiceProcessor::process_getScannerRows;
    processMap_["closeScanner"] = &THBaseServiceProcessor::process_closeScanner;
    processMap_["mutateRow"] = &THBaseServiceProcessor::process_mutateRow;
    processMap_["getScannerResults"] = &THBaseServiceProcessor::process_getScannerResults;
  }

  virtual ~THBaseServiceProcessor() {}
};

class THBaseServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  THBaseServiceProcessorFactory(const ::std::shared_ptr< THBaseServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< THBaseServiceIfFactory > handlerFactory_;
};

class THBaseServiceMultiface : virtual public THBaseServiceIf {
 public:
  THBaseServiceMultiface(std::vector<std::shared_ptr<THBaseServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~THBaseServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<THBaseServiceIf> > ifaces_;
  THBaseServiceMultiface() {}
  void add(::std::shared_ptr<THBaseServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  /**
   * Test for the existence of columns in the table, as specified in the TGet.
   * 
   * @return true if the specified TGet matches one or more keys, false if not
   * 
   * @param table the table to check on
   * 
   * @param tget the TGet to check for
   */
  bool exists(const std::string& table, const TGet& tget) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->exists(table, tget);
    }
    return ifaces_[i]->exists(table, tget);
  }

  /**
   * Method for getting data from a row.
   * 
   * If the row cannot be found an empty Result is returned.
   * This can be checked by the empty field of the TResult
   * 
   * @return the result
   * 
   * @param table the table to get from
   * 
   * @param tget the TGet to fetch
   */
  void get(TResult& _return, const std::string& table, const TGet& tget) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, table, tget);
    }
    ifaces_[i]->get(_return, table, tget);
    return;
  }

  /**
   * Method for getting multiple rows.
   * 
   * If a row cannot be found there will be a null
   * value in the result list for that TGet at the
   * same position.
   * 
   * So the Results are in the same order as the TGets.
   * 
   * @param table the table to get from
   * 
   * @param tgets a list of TGets to fetch, the Result list
   * will have the Results at corresponding positions
   * or null if there was an error
   */
  void getMultiple(std::vector<TResult> & _return, const std::string& table, const std::vector<TGet> & tgets) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMultiple(_return, table, tgets);
    }
    ifaces_[i]->getMultiple(_return, table, tgets);
    return;
  }

  /**
   * Commit a TPut to a table.
   * 
   * @param table the table to put data in
   * 
   * @param tput the TPut to put
   */
  void put(const std::string& table, const TPut& tput) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(table, tput);
    }
    ifaces_[i]->put(table, tput);
  }

  /**
   * Atomically checks if a row/family/qualifier value matches the expected
   * value. If it does, it adds the TPut.
   * 
   * @return true if the new put was executed, false otherwise
   * 
   * @param table to check in and put to
   * 
   * @param row row to check
   * 
   * @param family column family to check
   * 
   * @param qualifier column qualifier to check
   * 
   * @param value the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   * 
   * @param tput the TPut to put if the check succeeds
   */
  bool checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& tput) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkAndPut(table, row, family, qualifier, value, tput);
    }
    return ifaces_[i]->checkAndPut(table, row, family, qualifier, value, tput);
  }

  /**
   * Commit a List of Puts to the table.
   * 
   * @param table the table to put data in
   * 
   * @param tputs a list of TPuts to commit
   */
  void putMultiple(const std::string& table, const std::vector<TPut> & tputs) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putMultiple(table, tputs);
    }
    ifaces_[i]->putMultiple(table, tputs);
  }

  /**
   * Deletes as specified by the TDelete.
   * 
   * Note: "delete" is a reserved keyword and cannot be used in Thrift
   * thus the inconsistent naming scheme from the other functions.
   * 
   * @param table the table to delete from
   * 
   * @param tdelete the TDelete to delete
   */
  void deleteSingle(const std::string& table, const TDelete& tdelete) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteSingle(table, tdelete);
    }
    ifaces_[i]->deleteSingle(table, tdelete);
  }

  /**
   * Bulk commit a List of TDeletes to the table.
   * 
   * Throws a TIOError if any of the deletes fail.
   * 
   * Always returns an empty list for backwards compatibility.
   * 
   * @param table the table to delete from
   * 
   * @param tdeletes list of TDeletes to delete
   */
  void deleteMultiple(std::vector<TDelete> & _return, const std::string& table, const std::vector<TDelete> & tdeletes) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteMultiple(_return, table, tdeletes);
    }
    ifaces_[i]->deleteMultiple(_return, table, tdeletes);
    return;
  }

  /**
   * Atomically checks if a row/family/qualifier value matches the expected
   * value. If it does, it adds the delete.
   * 
   * @return true if the new delete was executed, false otherwise
   * 
   * @param table to check in and delete from
   * 
   * @param row row to check
   * 
   * @param family column family to check
   * 
   * @param qualifier column qualifier to check
   * 
   * @param value the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   * 
   * @param tdelete the TDelete to execute if the check succeeds
   */
  bool checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& tdelete) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkAndDelete(table, row, family, qualifier, value, tdelete);
    }
    return ifaces_[i]->checkAndDelete(table, row, family, qualifier, value, tdelete);
  }

  void increment(TResult& _return, const std::string& table, const TIncrement& tincrement) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->increment(_return, table, tincrement);
    }
    ifaces_[i]->increment(_return, table, tincrement);
    return;
  }

  void append(TResult& _return, const std::string& table, const TAppend& tappend) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->append(_return, table, tappend);
    }
    ifaces_[i]->append(_return, table, tappend);
    return;
  }

  /**
   * Get a Scanner for the provided TScan object.
   * 
   * @return Scanner Id to be used with other scanner procedures
   * 
   * @param table the table to get the Scanner for
   * 
   * @param tscan the scan object to get a Scanner for
   */
  int32_t openScanner(const std::string& table, const TScan& tscan) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->openScanner(table, tscan);
    }
    return ifaces_[i]->openScanner(table, tscan);
  }

  /**
   * Grabs multiple rows from a Scanner.
   * 
   * @return Between zero and numRows TResults
   * 
   * @param scannerId the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
   * 
   * @param numRows number of rows to return
   */
  void getScannerRows(std::vector<TResult> & _return, const int32_t scannerId, const int32_t numRows) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getScannerRows(_return, scannerId, numRows);
    }
    ifaces_[i]->getScannerRows(_return, scannerId, numRows);
    return;
  }

  /**
   * Closes the scanner. Should be called to free server side resources timely.
   * Typically close once the scanner is not needed anymore, i.e. after looping
   * over it to get all the required rows.
   * 
   * @param scannerId the Id of the Scanner to close *
   */
  void closeScanner(const int32_t scannerId) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeScanner(scannerId);
    }
    ifaces_[i]->closeScanner(scannerId);
  }

  /**
   * mutateRow performs multiple mutations atomically on a single row.
   * 
   * @param table table to apply the mutations
   * 
   * @param trowMutations mutations to apply
   */
  void mutateRow(const std::string& table, const TRowMutations& trowMutations) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mutateRow(table, trowMutations);
    }
    ifaces_[i]->mutateRow(table, trowMutations);
  }

  /**
   * Get results for the provided TScan object.
   * This helper function opens a scanner, get the results and close the scanner.
   * 
   * @return between zero and numRows TResults
   * 
   * @param table the table to get the Scanner for
   * 
   * @param tscan the scan object to get a Scanner for
   * 
   * @param numRows number of rows to return
   */
  void getScannerResults(std::vector<TResult> & _return, const std::string& table, const TScan& tscan, const int32_t numRows) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getScannerResults(_return, table, tscan, numRows);
    }
    ifaces_[i]->getScannerResults(_return, table, tscan, numRows);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class THBaseServiceConcurrentClient : virtual public THBaseServiceIf {
 public:
  THBaseServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  THBaseServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  /**
   * Test for the existence of columns in the table, as specified in the TGet.
   * 
   * @return true if the specified TGet matches one or more keys, false if not
   * 
   * @param table the table to check on
   * 
   * @param tget the TGet to check for
   */
  bool exists(const std::string& table, const TGet& tget) override;
  int32_t send_exists(const std::string& table, const TGet& tget);
  bool recv_exists(const int32_t seqid);
  /**
   * Method for getting data from a row.
   * 
   * If the row cannot be found an empty Result is returned.
   * This can be checked by the empty field of the TResult
   * 
   * @return the result
   * 
   * @param table the table to get from
   * 
   * @param tget the TGet to fetch
   */
  void get(TResult& _return, const std::string& table, const TGet& tget) override;
  int32_t send_get(const std::string& table, const TGet& tget);
  void recv_get(TResult& _return, const int32_t seqid);
  /**
   * Method for getting multiple rows.
   * 
   * If a row cannot be found there will be a null
   * value in the result list for that TGet at the
   * same position.
   * 
   * So the Results are in the same order as the TGets.
   * 
   * @param table the table to get from
   * 
   * @param tgets a list of TGets to fetch, the Result list
   * will have the Results at corresponding positions
   * or null if there was an error
   */
  void getMultiple(std::vector<TResult> & _return, const std::string& table, const std::vector<TGet> & tgets) override;
  int32_t send_getMultiple(const std::string& table, const std::vector<TGet> & tgets);
  void recv_getMultiple(std::vector<TResult> & _return, const int32_t seqid);
  /**
   * Commit a TPut to a table.
   * 
   * @param table the table to put data in
   * 
   * @param tput the TPut to put
   */
  void put(const std::string& table, const TPut& tput) override;
  int32_t send_put(const std::string& table, const TPut& tput);
  void recv_put(const int32_t seqid);
  /**
   * Atomically checks if a row/family/qualifier value matches the expected
   * value. If it does, it adds the TPut.
   * 
   * @return true if the new put was executed, false otherwise
   * 
   * @param table to check in and put to
   * 
   * @param row row to check
   * 
   * @param family column family to check
   * 
   * @param qualifier column qualifier to check
   * 
   * @param value the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   * 
   * @param tput the TPut to put if the check succeeds
   */
  bool checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& tput) override;
  int32_t send_checkAndPut(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TPut& tput);
  bool recv_checkAndPut(const int32_t seqid);
  /**
   * Commit a List of Puts to the table.
   * 
   * @param table the table to put data in
   * 
   * @param tputs a list of TPuts to commit
   */
  void putMultiple(const std::string& table, const std::vector<TPut> & tputs) override;
  int32_t send_putMultiple(const std::string& table, const std::vector<TPut> & tputs);
  void recv_putMultiple(const int32_t seqid);
  /**
   * Deletes as specified by the TDelete.
   * 
   * Note: "delete" is a reserved keyword and cannot be used in Thrift
   * thus the inconsistent naming scheme from the other functions.
   * 
   * @param table the table to delete from
   * 
   * @param tdelete the TDelete to delete
   */
  void deleteSingle(const std::string& table, const TDelete& tdelete) override;
  int32_t send_deleteSingle(const std::string& table, const TDelete& tdelete);
  void recv_deleteSingle(const int32_t seqid);
  /**
   * Bulk commit a List of TDeletes to the table.
   * 
   * Throws a TIOError if any of the deletes fail.
   * 
   * Always returns an empty list for backwards compatibility.
   * 
   * @param table the table to delete from
   * 
   * @param tdeletes list of TDeletes to delete
   */
  void deleteMultiple(std::vector<TDelete> & _return, const std::string& table, const std::vector<TDelete> & tdeletes) override;
  int32_t send_deleteMultiple(const std::string& table, const std::vector<TDelete> & tdeletes);
  void recv_deleteMultiple(std::vector<TDelete> & _return, const int32_t seqid);
  /**
   * Atomically checks if a row/family/qualifier value matches the expected
   * value. If it does, it adds the delete.
   * 
   * @return true if the new delete was executed, false otherwise
   * 
   * @param table to check in and delete from
   * 
   * @param row row to check
   * 
   * @param family column family to check
   * 
   * @param qualifier column qualifier to check
   * 
   * @param value the expected value, if not provided the
   * check is for the non-existence of the
   * column in question
   * 
   * @param tdelete the TDelete to execute if the check succeeds
   */
  bool checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& tdelete) override;
  int32_t send_checkAndDelete(const std::string& table, const std::string& row, const std::string& family, const std::string& qualifier, const std::string& value, const TDelete& tdelete);
  bool recv_checkAndDelete(const int32_t seqid);
  void increment(TResult& _return, const std::string& table, const TIncrement& tincrement) override;
  int32_t send_increment(const std::string& table, const TIncrement& tincrement);
  void recv_increment(TResult& _return, const int32_t seqid);
  void append(TResult& _return, const std::string& table, const TAppend& tappend) override;
  int32_t send_append(const std::string& table, const TAppend& tappend);
  void recv_append(TResult& _return, const int32_t seqid);
  /**
   * Get a Scanner for the provided TScan object.
   * 
   * @return Scanner Id to be used with other scanner procedures
   * 
   * @param table the table to get the Scanner for
   * 
   * @param tscan the scan object to get a Scanner for
   */
  int32_t openScanner(const std::string& table, const TScan& tscan) override;
  int32_t send_openScanner(const std::string& table, const TScan& tscan);
  int32_t recv_openScanner(const int32_t seqid);
  /**
   * Grabs multiple rows from a Scanner.
   * 
   * @return Between zero and numRows TResults
   * 
   * @param scannerId the Id of the Scanner to return rows from. This is an Id returned from the openScanner function.
   * 
   * @param numRows number of rows to return
   */
  void getScannerRows(std::vector<TResult> & _return, const int32_t scannerId, const int32_t numRows) override;
  int32_t send_getScannerRows(const int32_t scannerId, const int32_t numRows);
  void recv_getScannerRows(std::vector<TResult> & _return, const int32_t seqid);
  /**
   * Closes the scanner. Should be called to free server side resources timely.
   * Typically close once the scanner is not needed anymore, i.e. after looping
   * over it to get all the required rows.
   * 
   * @param scannerId the Id of the Scanner to close *
   */
  void closeScanner(const int32_t scannerId) override;
  int32_t send_closeScanner(const int32_t scannerId);
  void recv_closeScanner(const int32_t seqid);
  /**
   * mutateRow performs multiple mutations atomically on a single row.
   * 
   * @param table table to apply the mutations
   * 
   * @param trowMutations mutations to apply
   */
  void mutateRow(const std::string& table, const TRowMutations& trowMutations) override;
  int32_t send_mutateRow(const std::string& table, const TRowMutations& trowMutations);
  void recv_mutateRow(const int32_t seqid);
  /**
   * Get results for the provided TScan object.
   * This helper function opens a scanner, get the results and close the scanner.
   * 
   * @return between zero and numRows TResults
   * 
   * @param table the table to get the Scanner for
   * 
   * @param tscan the scan object to get a Scanner for
   * 
   * @param numRows number of rows to return
   */
  void getScannerResults(std::vector<TResult> & _return, const std::string& table, const TScan& tscan, const int32_t numRows) override;
  int32_t send_getScannerResults(const std::string& table, const TScan& tscan, const int32_t numRows);
  void recv_getScannerResults(std::vector<TResult> & _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}}} // namespace

#endif
