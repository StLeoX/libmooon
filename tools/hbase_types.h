/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef hbase_TYPES_H
#define hbase_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace apache { namespace hadoop { namespace hbase { namespace thrift2 {

/**
 * Specify type of delete:
 *  - DELETE_COLUMN means exactly one version will be removed,
 *  - DELETE_COLUMNS means previous versions will also be removed.
 */
struct TDeleteType {
  enum type {
    DELETE_COLUMN = 0,
    DELETE_COLUMNS = 1
  };
};

extern const std::map<int, const char*> _TDeleteType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDeleteType::type& val);

std::string to_string(const TDeleteType::type& val);

/**
 * Specify Durability:
 *  - SKIP_WAL means do not write the Mutation to the WAL.
 *  - ASYNC_WAL means write the Mutation to the WAL asynchronously,
 *  - SYNC_WAL means write the Mutation to the WAL synchronously,
 *  - FSYNC_WAL means Write the Mutation to the WAL synchronously and force the entries to disk.
 */
struct TDurability {
  enum type {
    SKIP_WAL = 1,
    ASYNC_WAL = 2,
    SYNC_WAL = 3,
    FSYNC_WAL = 4
  };
};

extern const std::map<int, const char*> _TDurability_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TDurability::type& val);

std::string to_string(const TDurability::type& val);

class TTimeRange;

class TColumn;

class TColumnValue;

class TColumnIncrement;

class TResult;

class TAuthorization;

class TCellVisibility;

class TGet;

class TPut;

class TDelete;

class TIncrement;

class TAppend;

class TScan;

class TMutation;

class TRowMutations;

class TIOError;

class TIllegalArgument;


class TTimeRange : public virtual ::apache::thrift::TBase {
 public:

  TTimeRange(const TTimeRange&) noexcept;
  TTimeRange& operator=(const TTimeRange&) noexcept;
  TTimeRange() noexcept
             : minStamp(0),
               maxStamp(0) {
  }

  virtual ~TTimeRange() noexcept;
  int64_t minStamp;
  int64_t maxStamp;

  void __set_minStamp(const int64_t val);

  void __set_maxStamp(const int64_t val);

  bool operator == (const TTimeRange & rhs) const
  {
    if (!(minStamp == rhs.minStamp))
      return false;
    if (!(maxStamp == rhs.maxStamp))
      return false;
    return true;
  }
  bool operator != (const TTimeRange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TTimeRange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TTimeRange &a, TTimeRange &b);

std::ostream& operator<<(std::ostream& out, const TTimeRange& obj);

typedef struct _TColumn__isset {
  _TColumn__isset() : qualifier(false), timestamp(false) {}
  bool qualifier :1;
  bool timestamp :1;
} _TColumn__isset;

/**
 * Addresses a single cell or multiple cells
 * in a HBase table by column family and optionally
 * a column qualifier and timestamp
 */
class TColumn : public virtual ::apache::thrift::TBase {
 public:

  TColumn(const TColumn&);
  TColumn& operator=(const TColumn&);
  TColumn() noexcept
          : family(),
            qualifier(),
            timestamp(0) {
  }

  virtual ~TColumn() noexcept;
  std::string family;
  std::string qualifier;
  int64_t timestamp;

  _TColumn__isset __isset;

  void __set_family(const std::string& val);

  void __set_qualifier(const std::string& val);

  void __set_timestamp(const int64_t val);

  bool operator == (const TColumn & rhs) const
  {
    if (!(family == rhs.family))
      return false;
    if (__isset.qualifier != rhs.__isset.qualifier)
      return false;
    else if (__isset.qualifier && !(qualifier == rhs.qualifier))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const TColumn &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TColumn & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TColumn &a, TColumn &b);

std::ostream& operator<<(std::ostream& out, const TColumn& obj);

typedef struct _TColumnValue__isset {
  _TColumnValue__isset() : timestamp(false), tags(false) {}
  bool timestamp :1;
  bool tags :1;
} _TColumnValue__isset;

/**
 * Represents a single cell and its value.
 */
class TColumnValue : public virtual ::apache::thrift::TBase {
 public:

  TColumnValue(const TColumnValue&);
  TColumnValue& operator=(const TColumnValue&);
  TColumnValue() noexcept
               : family(),
                 qualifier(),
                 value(),
                 timestamp(0),
                 tags() {
  }

  virtual ~TColumnValue() noexcept;
  std::string family;
  std::string qualifier;
  std::string value;
  int64_t timestamp;
  std::string tags;

  _TColumnValue__isset __isset;

  void __set_family(const std::string& val);

  void __set_qualifier(const std::string& val);

  void __set_value(const std::string& val);

  void __set_timestamp(const int64_t val);

  void __set_tags(const std::string& val);

  bool operator == (const TColumnValue & rhs) const
  {
    if (!(family == rhs.family))
      return false;
    if (!(qualifier == rhs.qualifier))
      return false;
    if (!(value == rhs.value))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.tags != rhs.__isset.tags)
      return false;
    else if (__isset.tags && !(tags == rhs.tags))
      return false;
    return true;
  }
  bool operator != (const TColumnValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TColumnValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TColumnValue &a, TColumnValue &b);

std::ostream& operator<<(std::ostream& out, const TColumnValue& obj);

typedef struct _TColumnIncrement__isset {
  _TColumnIncrement__isset() : amount(true) {}
  bool amount :1;
} _TColumnIncrement__isset;

/**
 * Represents a single cell and the amount to increment it by
 */
class TColumnIncrement : public virtual ::apache::thrift::TBase {
 public:

  TColumnIncrement(const TColumnIncrement&);
  TColumnIncrement& operator=(const TColumnIncrement&);
  TColumnIncrement() noexcept
                   : family(),
                     qualifier(),
                     amount(1LL) {
  }

  virtual ~TColumnIncrement() noexcept;
  std::string family;
  std::string qualifier;
  int64_t amount;

  _TColumnIncrement__isset __isset;

  void __set_family(const std::string& val);

  void __set_qualifier(const std::string& val);

  void __set_amount(const int64_t val);

  bool operator == (const TColumnIncrement & rhs) const
  {
    if (!(family == rhs.family))
      return false;
    if (!(qualifier == rhs.qualifier))
      return false;
    if (__isset.amount != rhs.__isset.amount)
      return false;
    else if (__isset.amount && !(amount == rhs.amount))
      return false;
    return true;
  }
  bool operator != (const TColumnIncrement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TColumnIncrement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TColumnIncrement &a, TColumnIncrement &b);

std::ostream& operator<<(std::ostream& out, const TColumnIncrement& obj);

typedef struct _TResult__isset {
  _TResult__isset() : row(false) {}
  bool row :1;
} _TResult__isset;

/**
 * if no Result is found, row and columnValues will not be set.
 */
class TResult : public virtual ::apache::thrift::TBase {
 public:

  TResult(const TResult&);
  TResult& operator=(const TResult&);
  TResult() noexcept
          : row() {
  }

  virtual ~TResult() noexcept;
  std::string row;
  std::vector<TColumnValue>  columnValues;

  _TResult__isset __isset;

  void __set_row(const std::string& val);

  void __set_columnValues(const std::vector<TColumnValue> & val);

  bool operator == (const TResult & rhs) const
  {
    if (__isset.row != rhs.__isset.row)
      return false;
    else if (__isset.row && !(row == rhs.row))
      return false;
    if (!(columnValues == rhs.columnValues))
      return false;
    return true;
  }
  bool operator != (const TResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TResult &a, TResult &b);

std::ostream& operator<<(std::ostream& out, const TResult& obj);

typedef struct _TAuthorization__isset {
  _TAuthorization__isset() : labels(false) {}
  bool labels :1;
} _TAuthorization__isset;

class TAuthorization : public virtual ::apache::thrift::TBase {
 public:

  TAuthorization(const TAuthorization&);
  TAuthorization& operator=(const TAuthorization&);
  TAuthorization() noexcept {
  }

  virtual ~TAuthorization() noexcept;
  std::vector<std::string>  labels;

  _TAuthorization__isset __isset;

  void __set_labels(const std::vector<std::string> & val);

  bool operator == (const TAuthorization & rhs) const
  {
    if (__isset.labels != rhs.__isset.labels)
      return false;
    else if (__isset.labels && !(labels == rhs.labels))
      return false;
    return true;
  }
  bool operator != (const TAuthorization &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TAuthorization & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TAuthorization &a, TAuthorization &b);

std::ostream& operator<<(std::ostream& out, const TAuthorization& obj);

typedef struct _TCellVisibility__isset {
  _TCellVisibility__isset() : expression(false) {}
  bool expression :1;
} _TCellVisibility__isset;

class TCellVisibility : public virtual ::apache::thrift::TBase {
 public:

  TCellVisibility(const TCellVisibility&);
  TCellVisibility& operator=(const TCellVisibility&);
  TCellVisibility() noexcept
                  : expression() {
  }

  virtual ~TCellVisibility() noexcept;
  std::string expression;

  _TCellVisibility__isset __isset;

  void __set_expression(const std::string& val);

  bool operator == (const TCellVisibility & rhs) const
  {
    if (__isset.expression != rhs.__isset.expression)
      return false;
    else if (__isset.expression && !(expression == rhs.expression))
      return false;
    return true;
  }
  bool operator != (const TCellVisibility &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCellVisibility & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TCellVisibility &a, TCellVisibility &b);

std::ostream& operator<<(std::ostream& out, const TCellVisibility& obj);

typedef struct _TGet__isset {
  _TGet__isset() : columns(false), timestamp(false), timeRange(false), maxVersions(false), filterString(false), attributes(false), authorizations(false) {}
  bool columns :1;
  bool timestamp :1;
  bool timeRange :1;
  bool maxVersions :1;
  bool filterString :1;
  bool attributes :1;
  bool authorizations :1;
} _TGet__isset;

/**
 * Used to perform Get operations on a single row.
 * 
 * The scope can be further narrowed down by specifying a list of
 * columns or column families.
 * 
 * To get everything for a row, instantiate a Get object with just the row to get.
 * To further define the scope of what to get you can add a timestamp or time range
 * with an optional maximum number of versions to return.
 * 
 * If you specify a time range and a timestamp the range is ignored.
 * Timestamps on TColumns are ignored.
 */
class TGet : public virtual ::apache::thrift::TBase {
 public:

  TGet(const TGet&);
  TGet& operator=(const TGet&);
  TGet() noexcept
       : row(),
         timestamp(0),
         maxVersions(0),
         filterString() {
  }

  virtual ~TGet() noexcept;
  std::string row;
  std::vector<TColumn>  columns;
  int64_t timestamp;
  TTimeRange timeRange;
  int32_t maxVersions;
  std::string filterString;
  std::map<std::string, std::string>  attributes;
  TAuthorization authorizations;

  _TGet__isset __isset;

  void __set_row(const std::string& val);

  void __set_columns(const std::vector<TColumn> & val);

  void __set_timestamp(const int64_t val);

  void __set_timeRange(const TTimeRange& val);

  void __set_maxVersions(const int32_t val);

  void __set_filterString(const std::string& val);

  void __set_attributes(const std::map<std::string, std::string> & val);

  void __set_authorizations(const TAuthorization& val);

  bool operator == (const TGet & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (__isset.columns != rhs.__isset.columns)
      return false;
    else if (__isset.columns && !(columns == rhs.columns))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.timeRange != rhs.__isset.timeRange)
      return false;
    else if (__isset.timeRange && !(timeRange == rhs.timeRange))
      return false;
    if (__isset.maxVersions != rhs.__isset.maxVersions)
      return false;
    else if (__isset.maxVersions && !(maxVersions == rhs.maxVersions))
      return false;
    if (__isset.filterString != rhs.__isset.filterString)
      return false;
    else if (__isset.filterString && !(filterString == rhs.filterString))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.authorizations != rhs.__isset.authorizations)
      return false;
    else if (__isset.authorizations && !(authorizations == rhs.authorizations))
      return false;
    return true;
  }
  bool operator != (const TGet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TGet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TGet &a, TGet &b);

std::ostream& operator<<(std::ostream& out, const TGet& obj);

typedef struct _TPut__isset {
  _TPut__isset() : timestamp(false), attributes(false), durability(false), cellVisibility(false) {}
  bool timestamp :1;
  bool attributes :1;
  bool durability :1;
  bool cellVisibility :1;
} _TPut__isset;

/**
 * Used to perform Put operations for a single row.
 * 
 * Add column values to this object and they'll be added.
 * You can provide a default timestamp if the column values
 * don't have one. If you don't provide a default timestamp
 * the current time is inserted.
 * 
 * You can specify how this Put should be written to the write-ahead Log (WAL)
 * by changing the durability. If you don't provide durability, it defaults to
 * column family's default setting for durability.
 */
class TPut : public virtual ::apache::thrift::TBase {
 public:

  TPut(const TPut&);
  TPut& operator=(const TPut&);
  TPut() noexcept
       : row(),
         timestamp(0),
         durability(static_cast<TDurability::type>(0)) {
  }

  virtual ~TPut() noexcept;
  std::string row;
  std::vector<TColumnValue>  columnValues;
  int64_t timestamp;
  std::map<std::string, std::string>  attributes;
  /**
   * 
   * @see TDurability
   */
  TDurability::type durability;
  TCellVisibility cellVisibility;

  _TPut__isset __isset;

  void __set_row(const std::string& val);

  void __set_columnValues(const std::vector<TColumnValue> & val);

  void __set_timestamp(const int64_t val);

  void __set_attributes(const std::map<std::string, std::string> & val);

  void __set_durability(const TDurability::type val);

  void __set_cellVisibility(const TCellVisibility& val);

  bool operator == (const TPut & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(columnValues == rhs.columnValues))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.durability != rhs.__isset.durability)
      return false;
    else if (__isset.durability && !(durability == rhs.durability))
      return false;
    if (__isset.cellVisibility != rhs.__isset.cellVisibility)
      return false;
    else if (__isset.cellVisibility && !(cellVisibility == rhs.cellVisibility))
      return false;
    return true;
  }
  bool operator != (const TPut &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPut & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TPut &a, TPut &b);

std::ostream& operator<<(std::ostream& out, const TPut& obj);

typedef struct _TDelete__isset {
  _TDelete__isset() : columns(false), timestamp(false), deleteType(true), attributes(false), durability(false) {}
  bool columns :1;
  bool timestamp :1;
  bool deleteType :1;
  bool attributes :1;
  bool durability :1;
} _TDelete__isset;

/**
 * Used to perform Delete operations on a single row.
 * 
 * The scope can be further narrowed down by specifying a list of
 * columns or column families as TColumns.
 * 
 * Specifying only a family in a TColumn will delete the whole family.
 * If a timestamp is specified all versions with a timestamp less than
 * or equal to this will be deleted. If no timestamp is specified the
 * current time will be used.
 * 
 * Specifying a family and a column qualifier in a TColumn will delete only
 * this qualifier. If a timestamp is specified only versions equal
 * to this timestamp will be deleted. If no timestamp is specified the
 * most recent version will be deleted.  To delete all previous versions,
 * specify the DELETE_COLUMNS TDeleteType.
 * 
 * The top level timestamp is only used if a complete row should be deleted
 * (i.e. no columns are passed) and if it is specified it works the same way
 * as if you had added a TColumn for every column family and this timestamp
 * (i.e. all versions older than or equal in all column families will be deleted)
 * 
 * You can specify how this Delete should be written to the write-ahead Log (WAL)
 * by changing the durability. If you don't provide durability, it defaults to
 * column family's default setting for durability.
 */
class TDelete : public virtual ::apache::thrift::TBase {
 public:

  TDelete(const TDelete&);
  TDelete& operator=(const TDelete&);
  TDelete() noexcept
          : row(),
            timestamp(0),
            deleteType((TDeleteType::type)1),
            durability(static_cast<TDurability::type>(0)) {
    deleteType = (TDeleteType::type)1;

  }

  virtual ~TDelete() noexcept;
  std::string row;
  std::vector<TColumn>  columns;
  int64_t timestamp;
  /**
   * 
   * @see TDeleteType
   */
  TDeleteType::type deleteType;
  std::map<std::string, std::string>  attributes;
  /**
   * 
   * @see TDurability
   */
  TDurability::type durability;

  _TDelete__isset __isset;

  void __set_row(const std::string& val);

  void __set_columns(const std::vector<TColumn> & val);

  void __set_timestamp(const int64_t val);

  void __set_deleteType(const TDeleteType::type val);

  void __set_attributes(const std::map<std::string, std::string> & val);

  void __set_durability(const TDurability::type val);

  bool operator == (const TDelete & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (__isset.columns != rhs.__isset.columns)
      return false;
    else if (__isset.columns && !(columns == rhs.columns))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.deleteType != rhs.__isset.deleteType)
      return false;
    else if (__isset.deleteType && !(deleteType == rhs.deleteType))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.durability != rhs.__isset.durability)
      return false;
    else if (__isset.durability && !(durability == rhs.durability))
      return false;
    return true;
  }
  bool operator != (const TDelete &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDelete & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDelete &a, TDelete &b);

std::ostream& operator<<(std::ostream& out, const TDelete& obj);

typedef struct _TIncrement__isset {
  _TIncrement__isset() : attributes(false), durability(false), cellVisibility(false) {}
  bool attributes :1;
  bool durability :1;
  bool cellVisibility :1;
} _TIncrement__isset;

/**
 * Used to perform Increment operations for a single row.
 * 
 * You can specify how this Increment should be written to the write-ahead Log (WAL)
 * by changing the durability. If you don't provide durability, it defaults to
 * column family's default setting for durability.
 */
class TIncrement : public virtual ::apache::thrift::TBase {
 public:

  TIncrement(const TIncrement&);
  TIncrement& operator=(const TIncrement&);
  TIncrement() noexcept
             : row(),
               durability(static_cast<TDurability::type>(0)) {
  }

  virtual ~TIncrement() noexcept;
  std::string row;
  std::vector<TColumnIncrement>  columns;
  std::map<std::string, std::string>  attributes;
  /**
   * 
   * @see TDurability
   */
  TDurability::type durability;
  TCellVisibility cellVisibility;

  _TIncrement__isset __isset;

  void __set_row(const std::string& val);

  void __set_columns(const std::vector<TColumnIncrement> & val);

  void __set_attributes(const std::map<std::string, std::string> & val);

  void __set_durability(const TDurability::type val);

  void __set_cellVisibility(const TCellVisibility& val);

  bool operator == (const TIncrement & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(columns == rhs.columns))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.durability != rhs.__isset.durability)
      return false;
    else if (__isset.durability && !(durability == rhs.durability))
      return false;
    if (__isset.cellVisibility != rhs.__isset.cellVisibility)
      return false;
    else if (__isset.cellVisibility && !(cellVisibility == rhs.cellVisibility))
      return false;
    return true;
  }
  bool operator != (const TIncrement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIncrement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TIncrement &a, TIncrement &b);

std::ostream& operator<<(std::ostream& out, const TIncrement& obj);

typedef struct _TAppend__isset {
  _TAppend__isset() : attributes(false), durability(false), cellVisibility(false) {}
  bool attributes :1;
  bool durability :1;
  bool cellVisibility :1;
} _TAppend__isset;

class TAppend : public virtual ::apache::thrift::TBase {
 public:

  TAppend(const TAppend&);
  TAppend& operator=(const TAppend&);
  TAppend() noexcept
          : row(),
            durability(static_cast<TDurability::type>(0)) {
  }

  virtual ~TAppend() noexcept;
  std::string row;
  std::vector<TColumnValue>  columns;
  std::map<std::string, std::string>  attributes;
  /**
   * 
   * @see TDurability
   */
  TDurability::type durability;
  TCellVisibility cellVisibility;

  _TAppend__isset __isset;

  void __set_row(const std::string& val);

  void __set_columns(const std::vector<TColumnValue> & val);

  void __set_attributes(const std::map<std::string, std::string> & val);

  void __set_durability(const TDurability::type val);

  void __set_cellVisibility(const TCellVisibility& val);

  bool operator == (const TAppend & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(columns == rhs.columns))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.durability != rhs.__isset.durability)
      return false;
    else if (__isset.durability && !(durability == rhs.durability))
      return false;
    if (__isset.cellVisibility != rhs.__isset.cellVisibility)
      return false;
    else if (__isset.cellVisibility && !(cellVisibility == rhs.cellVisibility))
      return false;
    return true;
  }
  bool operator != (const TAppend &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TAppend & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TAppend &a, TAppend &b);

std::ostream& operator<<(std::ostream& out, const TAppend& obj);

typedef struct _TScan__isset {
  _TScan__isset() : startRow(false), stopRow(false), columns(false), caching(false), maxVersions(true), timeRange(false), filterString(false), batchSize(false), attributes(false), authorizations(false), reversed(false) {}
  bool startRow :1;
  bool stopRow :1;
  bool columns :1;
  bool caching :1;
  bool maxVersions :1;
  bool timeRange :1;
  bool filterString :1;
  bool batchSize :1;
  bool attributes :1;
  bool authorizations :1;
  bool reversed :1;
} _TScan__isset;

/**
 * Any timestamps in the columns are ignored, use timeRange to select by timestamp.
 * Max versions defaults to 1.
 */
class TScan : public virtual ::apache::thrift::TBase {
 public:

  TScan(const TScan&);
  TScan& operator=(const TScan&);
  TScan() noexcept
        : startRow(),
          stopRow(),
          caching(0),
          maxVersions(1),
          filterString(),
          batchSize(0),
          reversed(0) {
  }

  virtual ~TScan() noexcept;
  std::string startRow;
  std::string stopRow;
  std::vector<TColumn>  columns;
  int32_t caching;
  int32_t maxVersions;
  TTimeRange timeRange;
  std::string filterString;
  int32_t batchSize;
  std::map<std::string, std::string>  attributes;
  TAuthorization authorizations;
  bool reversed;

  _TScan__isset __isset;

  void __set_startRow(const std::string& val);

  void __set_stopRow(const std::string& val);

  void __set_columns(const std::vector<TColumn> & val);

  void __set_caching(const int32_t val);

  void __set_maxVersions(const int32_t val);

  void __set_timeRange(const TTimeRange& val);

  void __set_filterString(const std::string& val);

  void __set_batchSize(const int32_t val);

  void __set_attributes(const std::map<std::string, std::string> & val);

  void __set_authorizations(const TAuthorization& val);

  void __set_reversed(const bool val);

  bool operator == (const TScan & rhs) const
  {
    if (__isset.startRow != rhs.__isset.startRow)
      return false;
    else if (__isset.startRow && !(startRow == rhs.startRow))
      return false;
    if (__isset.stopRow != rhs.__isset.stopRow)
      return false;
    else if (__isset.stopRow && !(stopRow == rhs.stopRow))
      return false;
    if (__isset.columns != rhs.__isset.columns)
      return false;
    else if (__isset.columns && !(columns == rhs.columns))
      return false;
    if (__isset.caching != rhs.__isset.caching)
      return false;
    else if (__isset.caching && !(caching == rhs.caching))
      return false;
    if (__isset.maxVersions != rhs.__isset.maxVersions)
      return false;
    else if (__isset.maxVersions && !(maxVersions == rhs.maxVersions))
      return false;
    if (__isset.timeRange != rhs.__isset.timeRange)
      return false;
    else if (__isset.timeRange && !(timeRange == rhs.timeRange))
      return false;
    if (__isset.filterString != rhs.__isset.filterString)
      return false;
    else if (__isset.filterString && !(filterString == rhs.filterString))
      return false;
    if (__isset.batchSize != rhs.__isset.batchSize)
      return false;
    else if (__isset.batchSize && !(batchSize == rhs.batchSize))
      return false;
    if (__isset.attributes != rhs.__isset.attributes)
      return false;
    else if (__isset.attributes && !(attributes == rhs.attributes))
      return false;
    if (__isset.authorizations != rhs.__isset.authorizations)
      return false;
    else if (__isset.authorizations && !(authorizations == rhs.authorizations))
      return false;
    if (__isset.reversed != rhs.__isset.reversed)
      return false;
    else if (__isset.reversed && !(reversed == rhs.reversed))
      return false;
    return true;
  }
  bool operator != (const TScan &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TScan & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TScan &a, TScan &b);

std::ostream& operator<<(std::ostream& out, const TScan& obj);

typedef struct _TMutation__isset {
  _TMutation__isset() : put(false), deleteSingle(false) {}
  bool put :1;
  bool deleteSingle :1;
} _TMutation__isset;

/**
 * Atomic mutation for the specified row. It can be either Put or Delete.
 */
class TMutation : public virtual ::apache::thrift::TBase {
 public:

  TMutation(const TMutation&);
  TMutation& operator=(const TMutation&);
  TMutation() noexcept {
  }

  virtual ~TMutation() noexcept;
  TPut put;
  TDelete deleteSingle;

  _TMutation__isset __isset;

  void __set_put(const TPut& val);

  void __set_deleteSingle(const TDelete& val);

  bool operator == (const TMutation & rhs) const
  {
    if (__isset.put != rhs.__isset.put)
      return false;
    else if (__isset.put && !(put == rhs.put))
      return false;
    if (__isset.deleteSingle != rhs.__isset.deleteSingle)
      return false;
    else if (__isset.deleteSingle && !(deleteSingle == rhs.deleteSingle))
      return false;
    return true;
  }
  bool operator != (const TMutation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMutation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMutation &a, TMutation &b);

std::ostream& operator<<(std::ostream& out, const TMutation& obj);


/**
 * A TRowMutations object is used to apply a number of Mutations to a single row.
 */
class TRowMutations : public virtual ::apache::thrift::TBase {
 public:

  TRowMutations(const TRowMutations&);
  TRowMutations& operator=(const TRowMutations&);
  TRowMutations() noexcept
                : row() {
  }

  virtual ~TRowMutations() noexcept;
  std::string row;
  std::vector<TMutation>  mutations;

  void __set_row(const std::string& val);

  void __set_mutations(const std::vector<TMutation> & val);

  bool operator == (const TRowMutations & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(mutations == rhs.mutations))
      return false;
    return true;
  }
  bool operator != (const TRowMutations &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRowMutations & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TRowMutations &a, TRowMutations &b);

std::ostream& operator<<(std::ostream& out, const TRowMutations& obj);

typedef struct _TIOError__isset {
  _TIOError__isset() : message(false) {}
  bool message :1;
} _TIOError__isset;

/**
 * A TIOError exception signals that an error occurred communicating
 * to the HBase master or a HBase region server. Also used to return
 * more general HBase error conditions.
 */
class TIOError : public ::apache::thrift::TException {
 public:

  TIOError(const TIOError&);
  TIOError& operator=(const TIOError&);
  TIOError() noexcept
           : message() {
  }

  virtual ~TIOError() noexcept;
  std::string message;

  _TIOError__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const TIOError & rhs) const
  {
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TIOError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIOError & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept override;
};

void swap(TIOError &a, TIOError &b);

std::ostream& operator<<(std::ostream& out, const TIOError& obj);

typedef struct _TIllegalArgument__isset {
  _TIllegalArgument__isset() : message(false) {}
  bool message :1;
} _TIllegalArgument__isset;

/**
 * A TIllegalArgument exception indicates an illegal or invalid
 * argument was passed into a procedure.
 */
class TIllegalArgument : public ::apache::thrift::TException {
 public:

  TIllegalArgument(const TIllegalArgument&);
  TIllegalArgument& operator=(const TIllegalArgument&);
  TIllegalArgument() noexcept
                   : message() {
  }

  virtual ~TIllegalArgument() noexcept;
  std::string message;

  _TIllegalArgument__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const TIllegalArgument & rhs) const
  {
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TIllegalArgument &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIllegalArgument & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept override;
};

void swap(TIllegalArgument &a, TIllegalArgument &b);

std::ostream& operator<<(std::ostream& out, const TIllegalArgument& obj);

}}}} // namespace

#endif
